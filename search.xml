<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>牛客周赛37</title>
    <url>/2024/03/20/%E7%89%9B%E5%AE%A2%E5%91%A8%E8%B5%9B37/</url>
    <content><![CDATA[<h3 id="题目：E-魔法之森的蘑菇"><a href="#题目：E-魔法之森的蘑菇" class="headerlink" title="题目：E-魔法之森的蘑菇"></a>题目：<a href="https://ac.nowcoder.com/acm/contest/77231/E">E-魔法之森的蘑菇</a></h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>给你一张图，起点为S终点为T，起初任意选择前进方向，除非遇到<em>，否则不能更改方向，遇到</em>可以选择朝向除返回刚刚位置的其他方向，#为障碍物，.为普通路径，求S-&gt;T最短距离。</p>
<h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>起初很容易考虑BFS，遇到*就把三个方向全加进去，遇到.就按原来方向走，同时把走过的点打上标记，通过bfs最短路属性记录最小答案。这个思路是没错的，但是我们之所以把走过的点打上标记，是因为我们已经保证这个点的所有状态已经加到队列中去。但是这个题一个点的所有状态并不是单纯走到这个点，而是包含了从四种方向走来的四种状态，比如假设一开始走到x点为2步，但是由于x点为 . ,它的这个方向并不能对最短答案有贡献，所以可能有一个更长的但是方向不一样的路径经过这个点，并且能对最短答案造成贡献。所以上述思路只需要改成走到一个点被打上标记只能是带有特定方向的，再取每个点距离最小值，本质上其实就是一个以四个方向形成的分层图最短路。</p>
<h4 id="题目代码："><a href="#题目代码：" class="headerlink" title="题目代码："></a>题目代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m, sx, sy, ex, ey, len[N][N][<span class="number">4</span>], dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> st[N][N][<span class="number">4</span>];</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line">queue&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                st[i][j][k] = <span class="number">0</span>, len[i][j][k] = <span class="number">1e18</span>;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">                sx = i, sy = j, g[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (g[i][j] == <span class="string">&#x27;T&#x27;</span>)</span><br><span class="line">                ex = i, ey = j, g[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        st[sx][sy][i] = <span class="number">1</span>, len[sx][sy][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = sx + dx[i];</span><br><span class="line">        <span class="type">int</span> z = sy + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= <span class="number">1</span> &amp;&amp; t &lt;= n &amp;&amp; z &gt;= <span class="number">1</span> &amp;&amp; z &lt;= m &amp;&amp; (g[t][z] == <span class="string">&#x27;*&#x27;</span> || g[t][z] == <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">            st[t][z][i] = <span class="number">1</span>, q.<span class="built_in">push</span>(&#123;t, z, i&#125;), len[t][z][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> [x, y, to] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> t, z;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;len[x][y]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">        <span class="keyword">if</span> (x == ex &amp;&amp; y == ey)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t = x + dx[to], z = y + dy[to];</span><br><span class="line">            <span class="keyword">if</span> (t &gt;= <span class="number">1</span> &amp;&amp; t &lt;= n &amp;&amp; z &gt;= <span class="number">1</span> &amp;&amp; z &lt;= m &amp;&amp; (g[t][z] == <span class="string">&#x27;*&#x27;</span> || g[t][z] == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; !st[t][z][to])</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;t, z, to&#125;), len[t][z][to] = <span class="built_in">min</span>(len[t][z][to], len[x][y][to] + <span class="number">1</span>), st[t][z][to] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (g[x][y] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tt;</span><br><span class="line">            <span class="keyword">if</span> (to == <span class="number">0</span>)</span><br><span class="line">                tt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (to == <span class="number">1</span>)</span><br><span class="line">                tt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (to == <span class="number">2</span>)</span><br><span class="line">                tt = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (to == <span class="number">3</span>)</span><br><span class="line">                tt = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                t = x + dx[i], z = y + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (i != tt &amp;&amp; t &gt;= <span class="number">1</span> &amp;&amp; t &lt;= n &amp;&amp; z &gt;= <span class="number">1</span> &amp;&amp; z &lt;= m &amp;&amp; (g[t][z] == <span class="string">&#x27;*&#x27;</span> || g[t][z] == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; !st[t][z][i])</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;t, z, i&#125;), len[t][z][i] = <span class="built_in">min</span>(len[t][z][i], len[x][y][to] + <span class="number">1</span>), st[t][z][i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, len[ex][ey][i]);</span><br><span class="line">    <span class="keyword">if</span> (ans != <span class="number">1e18</span>)</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目：F-三途川的摆渡人"><a href="#题目：F-三途川的摆渡人" class="headerlink" title="题目：F-三途川的摆渡人_"></a>题目：<a href="https://ac.nowcoder.com/acm/contest/77231/F">F-三途川的摆渡人_</a></h3><h4 id="题目大意："><a href="#题目大意：" class="headerlink" title="题目大意："></a>题目大意：</h4><p>n个数，每个数为ai（0&lt;&#x3D;ai&lt;&#x3D;127），求&amp;成0的得最少个数，不能输出-1。</p>
<h4 id="题目分析：-1"><a href="#题目分析：-1" class="headerlink" title="题目分析："></a>题目分析：</h4><p>从&amp;的性质去拆位贪心考虑显然太麻烦，但是&amp;具有传递性可以状态转移。设dp[i][a[i]&amp;j] 表示前i个物品，转移到a[i]&amp;j的最小次数：<br>$$<br>状态转移：dp[i][a[i]&amp;j]&#x3D;\min(dp[i][a[i]&amp;j], dp[i-1][j]+1);<br>$$<br>又因为相同的数&amp;，结果一定不为0，所以前n个数直接优化成扫0~127以内存在的值即可，而且只用到上一层所以直接滚动数组优化：<br>$$<br>状态转移：dp[1][i&amp;j]&#x3D;min(dp[1][i&amp;j],dp[0][j]+1);<br>$$</p>
<h4 id="题目代码：-1"><a href="#题目代码：-1" class="headerlink" title="题目代码："></a>题目代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][<span class="number">203</span>],p[<span class="number">220</span>];<span class="comment">//滚动数组和记录0~127数存在与否的p</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span> p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x;cin&gt;&gt;x;</span><br><span class="line">        p[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i])&#123;</span><br><span class="line">            dp[<span class="number">1</span>][i]=<span class="number">1</span>;<span class="comment">//当前点选，并且没有比直接选当前点来组成当前点次数更小的了</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">200</span>;j++)&#123;</span><br><span class="line">                dp[<span class="number">1</span>][i&amp;j]=<span class="built_in">min</span>(dp[<span class="number">1</span>][i&amp;j],dp[<span class="number">0</span>][j]+<span class="number">1</span>);<span class="comment">//dp[1][i&amp;j]不选，后面为选的，取最小</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">200</span>;j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j]=dp[<span class="number">1</span>][j];<span class="comment">//滚动赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[<span class="number">0</span>][<span class="number">0</span>]&gt;n)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;n-dp[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;<span class="comment">//求得组成当前数最小个数，所以抛弃个数为n-dp[0][0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>补题，牛客</category>
      </categories>
      <tags>
        <tag>图论，分层图，动态规划，类背包dp</tag>
      </tags>
  </entry>
</search>
